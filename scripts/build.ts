#!/usr/bin/env tsx
/**
 * Unified Build Script
 * Orchestrates the entire build process in phases
 */

import { execSync } from 'child_process';
import { readdir, writeFile } from 'fs/promises';
import { join } from 'path';

// ============================================================================
// Configuration
// ============================================================================

const MODULES_DIR = join(process.cwd(), 'src/modules');
const MODULE_REGISTRY_OUTPUT = join(process.cwd(), 'src/shared/router/modules.generated.ts');

const EXCLUDED_MODULES = [
  'analytics', 'subscriptions', 'billing', 'payments', 'admin',
  'clients', 'customers', 'events', 'health', 'invoices',
  'payouts', 'settings', 'stripe'
];

// ============================================================================
// Phase 1: Module Discovery
// ============================================================================

const discoverModules = async (): Promise<string[]> => {
  console.log('\n📦 Phase 1: Module Discovery');
  console.log('─'.repeat(50));

  const allDirs = await readdir(MODULES_DIR, { withFileTypes: true });

  const modules = allDirs
    .filter(dir => dir.isDirectory())
    .map(dir => dir.name)
    .filter(name => !EXCLUDED_MODULES.includes(name) && !name.startsWith('.'));

  console.log(`✅ Discovered ${modules.length} modules:`);
  modules.forEach(mod => console.log(`   • ${mod}`));

  return modules;
}

function toCamelCase(str: string): string {
  return str.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase());
}

const generateModuleRegistry = async (modules: string[]): Promise<void> => {
  const imports = modules
    .map(mod => `import ${toCamelCase(mod)}Http from '@/modules/${mod}/http';`)
    .join('\n');

  const registryEntries = modules
    .map(mod => `  { name: '${mod}', http: ${toCamelCase(mod)}Http }`)
    .join(',\n');

  const content = `// 🤖 AUTO-GENERATED - DO NOT EDIT
// Generated by: scripts/build.ts
// Last updated: ${new Date().toISOString()}

${imports}

export const MODULE_REGISTRY = [
${registryEntries}
] as const;

export type ModuleName = typeof MODULE_REGISTRY[number]['name'];
`;

  await writeFile(MODULE_REGISTRY_OUTPUT, content, 'utf-8');
  console.log(`✅ Generated: src/shared/router/modules.generated.ts`);
}

// ============================================================================
// Phase 2: Schema Sync
// ============================================================================

const syncSchemas = (): void => {
  console.log('\n🔄 Phase 2: Schema Sync');
  console.log('─'.repeat(50));

  execSync('tsx scripts/sync-schemas.ts', { stdio: 'inherit' });
}

// ============================================================================
// Phase 3: TypeScript Build (with bundling)
// ============================================================================

const buildTypeScript = (): void => {
  console.log('\n🔨 Phase 3: TypeScript Build');
  console.log('─'.repeat(50));

  execSync('tsup', { stdio: 'inherit' });
}

// ============================================================================
// Phase 4: Path Alias Resolution
// ============================================================================

const resolvePathAliases = (): void => {
  console.log('\n🔗 Phase 4: Path Alias Resolution');
  console.log('─'.repeat(50));

  execSync('tsc-alias -p tsconfig.json', { stdio: 'inherit' });
}

// ============================================================================
// Main Build Orchestration
// ============================================================================

const main = async (): Promise<void> => {
  const startTime = Date.now();

  console.log('');
  console.log('╔════════════════════════════════════════════════╗');
  console.log('║         🚀 Blawby Backend Build System        ║');
  console.log('╚════════════════════════════════════════════════╝');

  try {
    // Phase 1: Discover and register modules
    const modules = await discoverModules();
    await generateModuleRegistry(modules);

    // Phase 2: Sync database schemas
    syncSchemas();

    // Phase 3: Build TypeScript (bundled)
    buildTypeScript();

    // Phase 4: Resolve path aliases
    resolvePathAliases();

    const duration = ((Date.now() - startTime) / 1000).toFixed(2);

    console.log('');
    console.log('╔════════════════════════════════════════════════╗');
    console.log(`║  ✅ Build completed in ${duration}s                    ║`);
    console.log('╚════════════════════════════════════════════════╝');
    console.log('');

  } catch (error) {
    console.error('\n❌ Build failed:', error);
    process.exit(1);
  }
}

void main();

import { readdirSync, statSync, writeFileSync, existsSync } from 'fs';
import { join, relative } from 'path';

const MODULES_DIR = join(process.cwd(), 'src/modules');
const SHARED_DIR = join(process.cwd(), 'src/shared');
const SCHEMA_DIR = join(process.cwd(), 'src/schema');
const OUTPUT_FILE = join(process.cwd(), 'src/schema/index.ts');

const findSchemaFiles = (dir: string): string[] => {
  const schemas: string[] = [];

  if (!existsSync(dir)) {
    return schemas;
  }

  try {
    const items = readdirSync(dir);

    for (const item of items) {
      const fullPath = join(dir, item);
      const stat = statSync(fullPath);

      if (stat.isDirectory()) {
        schemas.push(...findSchemaFiles(fullPath));
      } else if (item.endsWith('.schema.ts')) {
        // Get relative path from src/schema to the schema file
        const relativePath = relative(SCHEMA_DIR, fullPath)
          .replace(/\\/g, '/')
          .replace(/\.ts$/, '');
        schemas.push(relativePath);
      }
    }
  } catch (error) {
    console.warn(`Warning: Could not read directory ${dir}`);
  }

  return schemas;
};

const generateSchemaIndex = (): void => {
  console.log('üîç Scanning for schema files...');

  const moduleSchemas = findSchemaFiles(MODULES_DIR);
  const sharedSchemas = findSchemaFiles(SHARED_DIR);
  const allSchemas = [...moduleSchemas, ...sharedSchemas]
    .sort()
    .filter((path) => !path.includes('index')); // Exclude index files

  const content = `/**
 * AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
 * 
 * This file is automatically generated by: pnpm run schemas:sync
 * It exports all schema files from modules and shared directories.
 * 
 * To add a new schema:
 * 1. Create a new *.schema.ts file in your module
 * 2. Run: pnpm run schemas:sync
 * 
 * Last updated: ${new Date().toISOString()}
 */

// Better Auth core schemas (users, sessions, organizations, etc.)
export * from './better-auth-schema';

// Auto-discovered schemas from modules and shared directories
${
  allSchemas.length > 0
    ? allSchemas.map((path) => `export * from './${path}';`).join('\n')
    : '// No additional schemas found'
}
`;

  writeFileSync(OUTPUT_FILE, content, 'utf-8');

  console.log('‚úÖ Schema index generated successfully!');
  console.log(`   üì¶ ${allSchemas.length} schemas exported`);

  if (allSchemas.length > 0) {
    console.log('\n   Exported schemas:');
    allSchemas.forEach((schema) => {
      console.log(`   - ${schema}`);
    });
  }
};

// Run the generator
try {
  generateSchemaIndex();
} catch (error) {
  console.error('‚ùå Failed to generate schema index:', error);
  process.exit(1);
}
